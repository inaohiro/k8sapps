apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-env
  namespace: default
data:
  K6_TRACES_OUTPUT: otel=http://otel-collector:4317
  OTEL_SERVICE_NAME: k6
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-data
  namespace: default
data:
  scripts.js: |
    import step1 from "./step1.js";
    import step2 from "./step2.js";

    export { step1, step2 };

    export const options = {
      scenarios: {
        step1: {
          executor: "per-vu-iterations",
          exec: "step1",
          vus: 5,
          iterations: 5,
          startTime: "0s",
          maxDuration: "20s",
        },
        step2: {
          executor: "per-vu-iterations",
          exec: "step2",
          vus: 5,
          iterations: 5,
          startTime: "0s",
          maxDuration: "20s",
        },
        step3: {
          executor: "per-vu-iterations",
          exec: "step3",
          vus: 1,
          iterations: 1,
          startTime: "20s",
        },
      },
    };

    export default function () {}

  step1.js: |
    import { fakeName, retry } from "./common.js";

    const url = "http://gateway:8080/api";

    /**
    * 複数の namespace のリソース一覧を取得する
    * もしリソースがあれば、詳細取得も実行する
    */
    export default function () {
      const namespace = fakeName();

      // token 発行
      const issueTokenReq = { namespace: namespace };
      let res = retry(
        "post",
        `${url}/tokens`,
        {
          headers: {
            "Content-Type": "application/json",
            "X-Error": "true",
          },
        },
        JSON.stringify(issueTokenReq)
      );

      // レスポンスから token 取得
      const token = res.json().token;

      // これ以降で必要な Authorization header
      const headers = {
        headers: {
          Authorization: `Bearer ${token}`,
          "X-Error": "true",
        },
      };

      res = retry("get", `${url}/deployments`, headers);
      if (res.body.length > 100) {
        let name = res.body[0]["name"];
        retry("get", `${url}/deployments/${name}`, headers);
      }

      res = retry("get", `${url}/pods`, headers);
      if (res.body.length > 100) {
        let name = res.body[0]["name"];
        retry("get", `${url}/pods/${name}`, headers);
      }

      res = retry("get", `${url}/services`, headers);
      if (res.body.length > 100) {
        let name = res.body[0]["name"];
        retry("get", `${url}/services/${name}`, headers);
      }

      retry("get", `${url}/images`, headers);
      retry("get", `${url}/flavors`, headers);

      // 終わったら namespace を消す
      retry("del", `${url}/namespace/${namespace}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
    }

  step2.js: |
    import { sleep } from "k6";
    import { fakeName, retry } from "./common.js";

    const url = "http://gateway:8080/api";

    /**
    * Deployment, Service を作成する
    */
    export default function () {
      const namespace = fakeName();

      // token 発行
      const issueTokenReq = { namespace: namespace };
      let res = retry(
        "post",
        `${url}/tokens`,
        {
          headers: {
            "Content-Type": "application/json",
            "X-Error": "true",
          },
        },
        JSON.stringify(issueTokenReq)
      );

      // レスポンスから token 取得
      const token = res.json().token;

      // これ以降で必要な Authorization header
      const headers = {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
          "X-Error": "true",
        },
      };

      // image 一覧
      res = retry("get", `${url}/images`, headers);
      let images = res.json();
      let index = Math.floor(Math.random() * images.length);
      let image_name = images[index].name;

      // 作成時のリクエストボディ
      const name = fakeName();
      const createDeployment = { name: name, image: image_name };
      const createService = {
        name: name,
        type: "ClusterIP",
        ports: [{ port: 80, targetPort: 80, protocol: "TCP" }],
      };

      retry(
        "post",
        `${url}/deployments`,
        headers,
        JSON.stringify(createDeployment)
      );
      retry("get", `${url}/deployments/${name}`, headers);
      res = retry(
        "post",
        `${url}/services`,
        headers,
        JSON.stringify(createService)
      );
      if (res.status !== 500) {
        retry("get", `${url}/services/${name}`, headers);
        retry("del", `${url}/services/${name}`, headers);
      }

      retry("del", `${url}/deployments/${name}`, headers);
      while (true) {
        res = retry("get", `${url}/deployments/${name}`, headers, null, 10);
        if (res.status == 404) {
          break;
        }
        sleep(1);
      }

      // 終わったら namespace を消す
      retry("del", `${url}/namespace/${namespace}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
    }

  step3.js: |
    import { retry } from "./common.js";

    const url = "http://gateway:8080/api";

    export default function () {
      retry("del", `${url}/namespace/_all`);
    }

  common.js: |
    import { sleep } from 'k6';
    import tempo from "./jslib.js";

    const http = new tempo.Client({
      propagator: "w3c",
    });

    export function fakeName() {
      return "a" + Math.random().toString(32).substring(2);
    }

    export function retry(method, url, params, body, count) {
      if (count === undefined) {
        count = 0;
      }

      var res;
      if (method === "get") {
        res = http[method](url, params);
      } else if (method === "del") {
        res = http[method](url, null, params);
      } else {
        res = http[method](url, body, params);
      }
      if (res.status < 300) {
        return res;
      }

      // 最大 5 回まで
      if (count >= 5) {
        return res;
      }

      sleep(1);

      return retry(method, url, params, body, count+1)
    }

  jslib.js: |
    // Copy from https://github.com/grafana/jslib.k6.io/blob/main/lib/http-instrumentation-tempo/1.0.1/index.js
    //
    // This code specifically uses commonJS as to be faster loading in k6
    // this can be changed after https://github.com/grafana/k6/issues/3265
    const http = require("k6/http");
    const crypto = require("k6/crypto");
    const execution = require("k6/execution");

    const propagatorMap = {
      "w3c": (sampler, traceID) => {
        return {
          // change parent-id to null
          "traceparent": `00-${traceID}--${sampler() ? "01" : "00"}`
        }
      },
      "jaeger": (sampler, traceID) => {
        return {
          "uber-trace-id": `${traceID}:${randHexString(8)}:0:${sampler() ? "1" : "0"}`,
        }
      },
    }

    class Client {
      #propagator;
      #sampler;
      #originalRequest;
      #originalAsyncRequest;

      constructor(opts, originalRequest = http.request, originalAsyncRequest = http.asyncRequest) {
        this.configure(opts)
        this.#originalRequest = originalRequest;
        this.#originalAsyncRequest = originalAsyncRequest;
      }

      configure(opts) {
        this.#sampler = newProbalisticSampler(opts.sampling);
        this.#propagator = propagatorMap[opts.propagator];
        if (this.#propagator == null) {
          throw "unknown propagator: " + opts.propagator
        }
      }

      // request instruments the http module's request function with tracing headers,
      // and ensures the trace_id is emitted as part of the output's data points metadata.
      request(method, url, ...args) {
        const traceID = newTraceID()
        const traceContextHeader = this.#propagator(this.#sampler, traceID)
        args = instrumentArguments(traceContextHeader, ...args)

        try {
          execution.vu.metrics.metadata["trace_id"] = traceID
          return this.#originalRequest(method, url, ...args)
        } finally {
          delete execution.vu.metrics.metadata["trace_id"]
        }
      }

      // asyncRequest instruments the http module's asyncRequest function with tracing headers,
      // and ensures the trace_id is emitted as part of the output's data points metadata.
      async asyncRequest(method, url, ...args) {
        const traceID = newTraceID()
        const traceContextHeader = this.#propagator(this.#sampler, traceID)
        args = instrumentArguments(traceContextHeader, ...args)

        let promise;
        try {
          execution.vu.metrics.metadata["trace_id"] = traceID
          promise = this.#originalAsyncRequest(method, url, ...args)
        } finally {
          delete execution.vu.metrics.metadata["trace_id"]
        }

        return await promise;
      }

      del(url, ...args) { return this.request("DELETE", url, ...args) }
      get(url, ...args) { return this.request("GET", url, null, ...args) }
      head(url, ...args) { return this.request("HEAD", url, null, ...args) }
      options(url, ...args) { return this.request("OPTIONS", url, ...args) }
      patch(url, ...args) { return this.request("PATCH", url, ...args) }
      post(url, ...args) { return this.request("POST", url, ...args) }
      put(url, ...args) { return this.request("PUT", url, ...args) }
    }

    function longToByteArray(long) {
      var byteArray = new Uint8Array(8)

      for (var index = byteArray.byteLength; index >= 0; index--) {
        const byte = long % 256
        byteArray[index] = byte
        long = (long-byte)/256;
        if (long < 1) {
          break
        }
      }

      return byteArray;
    }
    function instrumentArguments(traceContext, ...args) {
      switch (args.length) {
        case 0:
          args.push(null)
        // fallthrough to add the header
        case 1:
          // We only received a body argument
          args.push({ headers: traceContext })
          break;
        default: // this handles 2 and more just in case someone provided more arguments
          // We received both a body and a params argument. In the
          // event params would be nullish, we'll instantiate
          // a new object.
          if (args[1] == null) args[1] = {}

          let params = args[1]
          if (params.headers == null) {
            params.headers = {}
          }
          Object.assign(params.headers, traceContext)
          break;
      }

      return args
    }


    function newTraceID() {
      let result = "dc0718" // prefix for k6

      // add nanoseconds
      let now = Date.now()
      const ns = longToByteArray(now * 1e6) // this is very likely ... loosy
      let n = 3
      let i = 0
      for (; i < ns.byteLength; i++) { // skip leading zeros
        if (ns[i] == 0) continue;
        break;
      }
      for (; i < ns.byteLength; i++) {
        result += ns[i].toString(16).padStart(2, "0")
        n++;
      }

      // pad with random
      let random = new Uint8Array(crypto.randomBytes(16 - n));
      for (i=0; i < random.byteLength; i++) {
        result += random[i].toString(16).padStart(2, "0")
        n++;
      }

      return result
    }

    function newProbalisticSampler(samplingRate) {
      if (samplingRate < 0 || samplingRate > 1) {
        throw "sampling rate must be between 0.0 and 1.0"
      }
      if (typeof samplingRate == 'undefined') {
        samplingRate = 1

      }
      switch (samplingRate) {
        case 0:
          return () => false
        case 1:
          return () => true
        default:
          return () => Math.random() < samplingRate
      }
    }

    const digits = "0123456789abcdef";

    function randHexString(n) {
      let result = '';
      for (let i = 0; i < n; ++i) {
        result += digits[Math.floor(16 * Math.random())];
      }
      return result;
    }

    function instrumentHTTP(opts) {
      // capture the original values late, so that they include any previously made instrumentation changes
      const currentRequest = http.request;
      const currentAsyncRequest = http.asyncRequest;

      const client = new Client(opts, currentRequest, currentAsyncRequest);

      http.del = client.del.bind(client);
      http.get = client.get.bind(client);
      http.head = client.head.bind(client);
      http.options = client.options.bind(client);
      http.patch = client.patch.bind(client);
      http.post = client.post.bind(client);
      http.put = client.put.bind(client);
      http.request = client.request.bind(client)
      http.asyncRequest = client.asyncRequest.bind(client)
    }

    const exp = { Client: Client, instrumentHTTP: instrumentHTTP };

    module.exports = {
      default: exp,
      __esModule: true,
      ...exp
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k6
  namespace: default
  labels:
    app: k6
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k6
  template:
    metadata:
      labels:
        app: k6
    spec:
      containers:
        - name: k6
          image: grafana/k6
          # TODO: loop
          command: ["/bin/sh", "-c"]
          args: ["while true; do k6 run /opt/k6/scripts/scripts.js; done"]
          envFrom:
            - configMapRef:
                name: k6-env
          volumeMounts:
            - name: k6-data
              mountPath: /opt/k6/scripts
              readOnly: true
      volumes:
        - name: k6-data
          configMap:
            name: k6-data
