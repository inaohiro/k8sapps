apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-env
  namespace: default
data:
  K6_OTEL_GRPC_EXPORTER_INSECURE: "true"
  K6_OTEL_MTRICS_PREFIX: "k6_"
  K6_OTEL_GRPC_EXPORTER_ENDPOINT: "otel-collector:4317"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-data
  namespace: default
data:
  scripts.js: |
    import tempo from 'https://jslib.k6.io/http-instrumentation-tempo/1.0.1/index.js';
    import step1 from "./step1.js";
    // import step2 from "./step2";
    // import step3 from "./step3";

    // export { step1, step2, step3 };
    export { step1 };

    tempo.instrumentHTTP({
      propagator: 'w3c',
    });

    export const options = {
      scenarios: {
        step1: {
          executor: "per-vu-iterations",
          exec: "step1",
          vus: 1,
          iterations: 1,
          startTime: "0s",
        },
        // step2: {
        //   executor: "per-vu-iterations",
        //   exec: "step2",
        //   vus: 1,
        //   iterations: 1,
        //   startTime: "0s",
        // },
        // step3: {
        //   executor: "per-vu-iterations",
        //   exec: "step3",
        //   vus: 1,
        //   iterations: 1,
        //   startTime: "0s",
        // },
      },
    };

    export default function () {}
  step1.js: |
    import tempo from 'https://jslib.k6.io/http-instrumentation-tempo/1.0.1/index.js';
    import http from "k6/http";

    tempo.instrumentHTTP({
      propagator: 'w3c',
    });

    const url = "http://gateway:8080/api";

    export default function () {
      const namespaces = [fakeName(), fakeName(), fakeName()];

      for (const namespace of namespaces) {
        const issueTokenReq = { namespace: namespace };
        let res = http.post(`${url}/tokens`, JSON.stringify(issueTokenReq), {
          headers: { "Content-Type": "application/json" },
        });
        const token = res.json().token;
        const headers = {
          headers: { Authorization: `Bearer ${token}` },
        };

        http.get(`${url}/deployments`, headers);
        http.get(`${url}/pods`, headers);
        http.get(`${url}/services`, headers);
        http.get(`${url}/images`, headers);
        http.get(`${url}/flavors`, headers);
      }
    }

    function fakeName() {
      return Math.random().toString(32).substring(2);
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k6
  namespace: default
  labels:
    app: k6
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k6
  template:
    metadata:
      labels:
        app: k6
    spec:
      containers:
        - name: k6
          image: grafana/k6
          # TODO: loop
          command: ["/bin/sh", "-c"]
          args:
            [
              "while true; do k6 run -o experimental-opentelemetry /opt/k6/scripts/scripts.js; done",
            ]
          envFrom:
            - configMapRef:
                name: k6-env
          volumeMounts:
            - name: k6-data
              mountPath: /opt/k6/scripts
              readOnly: true
      volumes:
        - name: k6-data
          configMap:
            name: k6-data
